归根到底，Go语言是一门工程语言。
    本章我们将从以下几个方面介绍Go语言所引入的工程管理思想、工具和规范：
        代码风格
        文档风格和管理
        单元测试与性能测试方法
        项目工程结构
        跨平台开发
        打包分发


Go 命令行工具:
   任何一门程序设计语言要能推广开来并投入到生产环境中，高效、易用、有好的开发环境都是必
不可少的 

基本用法:
    go version
    go help

简而言之，Gotool可以帮你完成以下这几类工作：
  代码格式化
  代码质量分析和修复
  单元测试与性能测试
  工程构建
  代码文档的提取和展示    
  依赖包管理
  执行其他的包含指令，比如 6g 等


代码风格:
        “代码必须是本着写给人阅读的原则来编写，只不过顺便给机器执行而已。”这段话来自《计
    算机程序设计与解释》，很精练地说明了代码风格的作用。
    
        Go语言很可能是第一个将代码风格强制统一的语言。一些对于其他语言的编译器完全忽视
    的问题，在Go编译器前就会被认为是编译错误，比如如果花括号新起了一行摆放，你就会看到
    一个醒目的编译错误。这一点会让很多人觉得不可思议。无论喜欢还是讨厌，与其他那些单单编
    码规范就能写出一本书的语言相比，毫无疑问Go语言的这种做法简化了问题。

        Go语言的编码规范，主要分两类，分别：由Go编译器进行强制的编码规范
    以及由Gotool推行的非强制性编码风格建议。其他的一些编码规范里通常会列出的细节，比如应
    该用Tab还是用4个空格，这些不在本书的讨论范围之内

强制性编码规范:
    命名:
        命名规则涉及变量、常量、全局函数、结构、接口、方法等的命名。
        任何需要对外暴露的名字必须以大写字母开头，不需要对外暴露的则应该以小写字母开头

    排列:
        Go语言甚至对代码的排列方式也进行了语法级别的检查，约定了代码块中花括号的明确摆放位置

    非强制性编码风格建议:
        Gotool中包含了一个代码格式化的功能，这也是一般语言都无法想象的事情。
            go fmt

        go fmt hello.go

远程 import 支持  

    我们有一个用于计算CRC32的包托管于Github，那么可以这样写：
    package main
    import (
        "fmt"
        "github.com/myteam/exp/crc32"
    )

    然后，在执行 go build 或者 go install 之前，只需要加这么一句：
    go get github.com/myteam/exp/crc32

        当我们执行完 go get 之后，我们会在src目录中看到github.com目录，其中包含
    myteam/exp/crc32目录。在crc32中，就是该包的所有源代码。也就是说，go工具会自动帮你获取
    位于远程的包源码，在随后的编译中，也会在pkg目录中生成对应的.a文件。
    所有魔术般的工作，其实都是go工具在完成。对于Go语言本身来讲，
    远程包 github.com/myteam/exp/crc32只是一个与 fmt 无异的本地路径而已。

工程组织:
    Go语言工程不需要任何工程文件，一个比较完整的工程会在根目录处放置这样几个文本文件。
        README：简单介绍本项目目标和关键的注意事项，通常第一次使用时应该先阅读本文档。
        LICENSE：本工程采用的分发协议，所有开源项目通常都有这个文件。

    一个标准的Go语言工程包含以下几个目录：
        src、pkg和bin。
        目录src用于包含所有的源代码， 是Gotool一个强制的规则，
        而pkg和bin则无需手动创建，如果必要Gotool在构建过程中会自动创建这些目录。

    
            构建过程中Gotool对包结构的理解完全依赖于src下面的目录结构，比如对于上面的例子，
        Gotool会认为src下包含了两个包： calc 和 simplemath ，而且这两个包的路径都是一级的，即
        simplemath 下的*.go文件将会被构建为一个名为 simplemath.a 的包。

文档管理:
    程序，包括代码和文档。
    而软件产品，更是包括了：源代码（可选）、可执行程序、文档和服务。

    我们可以很容易看出，在一个软件交付的过程中，程序只是其中的一个基本环节，
    更多的工作是告诉用户如何部署、使用和维护软件，此时文档将起到关键性的作用。

    现有工具 Javadoc工具，使用过程中， 代码规范略偏复杂。相比执行go doc 更加简便。
    go doc 命令提取包中的注释内容，并将其格式化输出到终端窗口中。因为我们的
    工程目录已经加入到 GOPATH 变量中，所以这个命令也可以在任意位置运行

    使用：
        go doc foo // foo 为包名称

    虽然这个输出结果比较清晰，但考虑到有时候包里面的注释量非常大，所以更合适的查看方
    式是在浏览器窗口中，并且最好有交互功能。要达成这样的效果也非常简单，只需修改命令行为，
    如下：
    godoc -http=:76 -path="."

跨平台开发
    CPU又分为不同的位数，比如8位、16位、32位、64位
    个人电脑和服务器通常为80×86架构，而移动设备则以ARM架构为主
    正因为有了以上这些区别，我们才有了跨平台开发这个话题

    交叉编译:
            鉴于Google对Linux的偏爱，目前Go语言对Linux平台的支持最佳。Mac OS X因为底层也是
    *nix架构，因此运行Go也没有明显障碍。但Go语言对于Windows平台的支持就比较欠缺了，需要
    通过MinGW间接支持，自然性能不会很好，且开发过程中会时常遇到一些奇怪的问题。

        我们可以通过设置 GOOS 和 GOARCH 两个环境变量来指定交叉编译的目标格式。表7-1为当前的支持
    情况说明，其中 darwin 对应于Mac OS X。

打包分发
            就目前而言，以二进制方式分发Go包并不是很现实。由于Go语言对于兼容性控制的非常严
    格，任何一个版本号的不同都将导致无法链接包。因此，如果你使用Go语言开发了一个库，那
    么最合适的库分发方式是直接打`包源代码包并进行分发，由使用者自行编译。
    当然，可执行文件没有这个问题。因此如果要避免这个包链接的问题，可以考虑如何将核心
    功能以二进制的服务器程序形式提供，并辅以开源的客户端SDK
