错误处理是学习任何编程语言都需要考虑的一个重要话题。在早期的语言中，错误处理不是
语言规范的一部分，通常只作为一种编程范式存在，比如C语言中的 errno 。但自C++语言以来，
语言层面上会增加错误处理的支持，比如异常（exception）的概念和 try-catch 关键字的引入。

Go语言在此功能上考虑得更为深远。漂亮的错误处理规范是Go语言最大的亮点之一。

error 接口
Go语言引入了一个关于错误处理的标准模式，即 error 接口，该接口的定义如下：

type error interface {
    Error() string
}


对于大多数函数，如果要返回错误，大致上都可以定义为如下模式，将 error 作为多种返回 值中的最后一个，但这并非是强制要求：

func Foo(param int)(n int, err error) {
// ...
}

调用时的代码建议按如下方式处理错误情况：
n, err := Foo(0)
if err != nil {
// 错误处理
} else {
// 使用返回值n
}

defer:
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
panic() 和 recover():
    Go语言引入了两个内置函数 panic() 和 recover() 以报告和处理运行时错误和程序中的错误场景  

defer func() {
    if r := recover(); r != nil {
        log.Printf("Runtime error caught: %v", r)
    }
}()
foo()

无论 foo() 中是否触发了错误处理流程，该匿名 defer 函数都将在函数退出时得到执行。假
如 foo() 中触发了错误处理流程， recover() 函数执行将使得该错误处理过程终止。如果错误处
理流程被触发时，程序传给 panic 函数的参数不为 nil ，则该函数还会打印详细的错误信息。

