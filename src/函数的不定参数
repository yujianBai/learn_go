不定参数：
    不定参数类型：
        不定参数是指函数传入的参数个数为不定量。
        这类函数的定义：
            func myfunc(args ...int){
                for _, arg := range(args){
                    fmt.Println(arg)
                }
            }
    
    不定参数传递：
        func myfunc1(args ...int){
            myfunc2(args...)
        }

    任意类型的不定参数：
        // go 中 interface{}代表任意类型
        func Printf(format string, args ...interface{})


匿名函数：
    func (a, b int, z float64) bool{
        return a*b < int(z)
    }(1, 2, 3) // 花括号后直接跟参数列表表示函数调用

    匿名函数可以直接赋值给一个变量或者直接执行。

闭包：
    闭包是可以包含自由（未绑定到特定对象）变量的代码块，这些变量不在这个代码块内或者
任何全局上下文中定义，而是在定义代码块的环境中定义。要执行的代码块（由于自由变量包含
在代码块中，所以这些自由变量以及它们引用的对象没有被释放）为自由变量提供绑定的计算环
境（作用域）。

闭包的价值：
    闭包的价值在于可以作为函数对象或者匿名函数，对于类型系统而言，这意味着不仅要表示
数据还要表示代码。支持闭包的多数语言都将函数作为第一级对象，就是说这些函数可以存储到
变量中作为参数传递给其他函数，最重要的是能够被函数动态创建和返回

go语言中的闭包：
    Go语言中的闭包同样也会引用到函数外的变量。