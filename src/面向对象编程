对于面向对象编程的支持Go 语言设计得非常简洁而优雅。简洁之处在于，Go语言并没有沿
袭传统面向对象编程中的诸多概念，比如继承、虚函数、构造函数和析构函数、隐藏的 this 指
针等。

优雅之处在于，Go语言对面向对象编程的支持是语言类型系统中的天然组成部分。
整个类型系统通过接口串联，浑然一体。我们在本章中将一一解释这些特性


我们对于一些事物的不理解或者畏惧，原因都在于这些事情所有意无意带有的绚丽外衣和神
秘面纱。只要揭开这一层直达本质，就会发现一切其实都很简单。

“在Go语言中没有隐藏的 this 指针”这句话的含义是：
      方法施加的目标（也就是“对象”）显式传递，没有被隐藏起来；
      方法施加的目标（也就是“对象”）不需要非得是指针，也不用非得叫 this 。

值语义和引用语义:
    值语义和引用语义的差别在于赋值，比如下面的例子：
    b = a; b.Modify()
    如果 b 的修改不会影响 a 的值，那么此类型属于值类型。如果会影响 a 的值，那么此类型是引用类型。

结构体
    Go语言的结构体（struct）和其他语言的类（class）有同等的地位，但Go语言放弃了包括继
    承在内的大量面向对象特性，只保留了组合（composition）这个最基础的特性。

初始化
    在定义了 Rect 类型后，该如何创建并初始化 Rect 类型的对象实例呢？这可以通过如下几种
    方法实现：
        rect1 := new(Rect)
        rect2 := &Rect{}
        rect3 := &Rect{0, 0, 100, 200}
        rect4 := &Rect{width: 100, height: 200}

匿名组合:
    确切地说，Go语言也提供了继承，但是采用了组合的文法，所以我们将其称为匿名组合：

    type Base struct {
        Name string
    }
    func (base *Base) Foo() { ... }
    func (base *Base) Bar() { ... }

接口：
    接口在Go语言有着至关重要的地位。如果说goroutine和channel 是支撑起Go语言的并发模型
    的基石，让Go语言在如今集群化与多核化的时代成为一道极为亮丽的风景，那么接口是Go语言
    整个类型系统的基石，让Go语言在基础编程哲学的探索上达到前所未有的高度。


接口查询
    有办法让上面的 Writer 接口转换为 two.IStream 接口么？有。那就是我们即将讨论的接口 查询语法，代码如下：
    var file1 Writer = ...
    if file5, ok := file1.(two.IStream); ok {
        ...
    }
    这个 if 语句检查 file1 接口指向的对象实例是否实现了 two.IStream 接口，如果实现了，则执行特定的代码。
    接口查询是否成功，要在运行期才能够确定。它不像接口赋值，编译器只需要通过静态类型检查即可判断赋值是否可行。

 Any 类型
    由于Go语言中任何对象实例都满足空接口 interface{} ，所以 interface{} 看起来像是可 以指向任何对象的 Any 类型，如下：
    var v1 interface{} = 1 // 将int类型赋值给interface{}
    var v2 interface{} = "abc" // 将string类型赋值给interface{}
    var v3 interface{} = &v2 // 将*interface{}类型赋值给interface{}
    var v4 interface{} = struct{ X int }{1}
    var v5 interface{} = &struct{ X int }{1}