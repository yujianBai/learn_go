并发编程：
    优雅的并发编程范式，完善的并发支持，出色的并发性能是Go语言区别于其他语言的一大
    特色。使用Go语言开发服务器程序时，就需要对它的并发机制有深入的了解。

就目前而言，并发包含以下几种主流的实现模型:

    多进程 共享内存系统

    多线程 共享内存系统

    基于回调的非阻塞/异步IO:
        这种架构的诞生实际上来源于多线程模式的危机。在很多
        高并发服务器开发实践中，使用多线程模式会很快耗尽服务器的内存和CPU资源。而这
        种模式通过事件驱动的方式使用异步IO，使服务器持续运转，且尽可能地少用线程，降
        低开销，它目前在Node.js中得到了很好的实践。但是使用这种模式，编程比多线程要复
        杂，因为它把流程做了分割，对于问题本身的反应不够自然。

    协程 消息传递系统 coroutine 协程的最大优势在于其“轻量级”，可以轻松创建上百万个而不会导致系统资源衰竭，而线程和进程通常最多也不能超过1万个。

        Go 语言在语言级别支持轻量级线程，叫goroutine。Go 语言标准库提供的所有系统调用操作
        （当然也包括所有同步 IO 操作），都会出让 CPU 给其他goroutine。这让事情变得非常简单，让轻
        量级线程的切换管理不依赖于系统的线程和进程，也不依赖于CPU的核心数量。

        不需要操作系统来进行抢占式调度，
        且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发
        性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的
        支持，如果不支持，则需要用户在程序中自行实现调度器。目前，原生支持协程的语言
        还很少。

并发通信：
        事实上，不管是什么平台，什么编程语言，不管在哪，并发都是一个大话题。话题大小通常
    也直接对应于问题的大小。并发编程的难度在于协调，而协调就要通过交流。从这个角度看来，
    并发单元间的通信是最大的问题。

“不要通过共享内存来通信，而应该通过通信来共享内存。” 

channel
    channel是Go语言在语言级别提供的goroutine间的通信方式。

    channel是类型相关的。也就是说，一个channel只能传递一种类型的值，这个类型需要在声
    明channel时指定。如果对Unix管道有所了解的话，就不难理解channel，可以将其认为是一种类
    型安全的管道。

    var ch chan int
    var m map[string] chan bool // 声明一个map， 元素是bool型的channel

    ch := make(chan int) // 声明并初始化了一个int 型的名为 ch 的channel // 无缓冲

channel use
    在channel的用法中，最常见的包括写入和读出。将一个数据写入（发送）至channel的语法
    很直观，如下：
    ch <- value
    向channel写入数据通常会导致程序阻塞，直到有其他goroutine从这个channel中读取数据。从
    channel中读取数据的语法是
    value := <-ch
    如果channel之前没有写入数据，那么从channel中读取数据也会导致程序阻塞，直到channel
    中被写入数据为止。我们之后还会提到如何控制channel只接受写或者只允许读取，即单向
    channel。

select:
    早在Unix时代， select 机制就已经被引入。通过调用 select() 函数来监控一系列的文件句柄，一旦其中一个文件句柄发生了IO动作，该 select() 调用就会被返回。后来该机制也被用于
实现高并发的Socket服务器程序。Go语言直接在语言级别支持 select 关键字，用于处理异步IO
问题。

    select 的用法与 switch 语言非常类似，由 select 开始一个新的选择块，每个选择条件由
case 语句来描述。与 switch 语句可以选择任何可使用相等比较的条件相比， select 有比较多的
限制，其中最大的一条限制就是每个 case 语句里必须是一个IO操作，大致的结构如下：
    select {
        case <-chan1:
            // 如果chan1成功读到数据，则进行该case处理语句
        case chan2 <- 1:
            // 如果成功向chan2写入数据，则进行该case处理语句
        default:
            // 如果上面都没有成功，则进入default处理流程
    }

缓冲机制：
    c := make(chan int, 1024) //缓冲大小为1024， 直到缓冲区写满为止， 不会被阻塞

超时机制：
    在并发编程的通信过程中，最需要处理的就是超时问题，即向channel写数据时发现channel
已满，或者从channel试图读取数据时发现channel为空。如果不正确处理这些情况，很可能会导
致整个goroutine锁死。

    Go语言没有提供直接的超时处理机制，但我们可以利用 select 机制。虽然 select 机制不是
专为超时而设计的，却能很方便地解决超时问题。因为 select 的特点是只要其中一个 case 已经
完成，程序就会继续往下执行，而不会考虑其他 case 的情况。

    基于此特性，我们来为channel实现超时机制：

   // 首先，我们实现并执行一个匿名的超时等待函数
    timeout := make(chan bool, 1)
    go func() {
        time.Sleep(1e9) // 等待1秒钟
        timeout <- true
    }()
    // 然后我们把timeout这个channel利用起来
    select {
        case <-ch:
        // 从ch中读取到数据
        case <-timeout:
        // 一直没有从ch中读取到数据，但从timeout中读取到了数据
    } 

    这样使用 select 机制可以避免永久等待的问题，因为程序会在 timeout 中获取到一个数据
    后继续执行，无论对 ch 的读取是否还处于等待状态，从而达成1秒超时的效果。
    这种写法看起来是一个小技巧，但却是在Go语言开发中避免channel通信超时的最有效方法。
    在实际的开发过程中，这种写法也需要被合理利用起来，从而有效地提高代码质量。
    


单向channel
    如果一个channel只允许写，即使1写进去了，也没有丝毫意义，因为没有机会读取里面的数据。
   
    所谓的单向channel概念，其实只是对channel的一种使用限制。
    单向channel变量的声明非常简单，如下：
    var ch1 chan int  // ch1是一个正常的channel，不是单向的
    var ch2 chan<- float64// ch2是单向channel，只用于写float64数据
    var ch3 <-chan int  // ch3是单向channel，只用于读取int数据

关闭channel
    关闭channel非常简单，直接使用Go语言内置的 close() 函数即可：
        close(ch)
    如何判断一个channel是否已经被关闭？
        x, ok := <-ch
        这个用法与 map 中的按键获取 value 的过程比较类似，只需要看第二个 bool 返回值即可，如
        果返回值是 false 则表示 ch 已经被关闭


多核并行化
    到底应该设置多少个CPU核心呢，其实 runtime 包中还提供了另外一个函数 NumCPU() 来获
    取核心数。可以看到，Go语言其实已经感知到所有的环境信息，下一版本中完全可以利用这些
    信息将goroutine调度到所有CPU核心上，从而最大化地利用服务器的多核计算能力。抛弃
    GOMAXPROCS 只是个时间问题。

出让时间片
    如果要比较精细地控制goroutine的行为，
    就必须比较深入地了解Go语言开发包中 runtime 包所提供的具体功能。


锁：
var l sync.Mutex
func foo() {
   l.Lock()
   defer l.Unlock()
   //...
}
这里我们再一次见证了Go语言 defer 关键字带来的优雅。

全局唯一性操作
    var once sync.Once
    func setup() {
        a = "hello, world"
        done = true
    }















